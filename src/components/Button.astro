---
type Props =
	| ({
			href: string;
	  } & astroHTML.JSX.AnchorHTMLAttributes)
	| ({
			href?: undefined;
	  } & astroHTML.JSX.ButtonHTMLAttributes);

const props = Astro.props;
---

<div>
	{
		props.href !== undefined ? (
			<a {...props} href={props.href}>
				<slot />
			</a>
		) : (
			<button {...props}>
				<slot />
			</button>
		)
	}
</div>

<style>
	div {
		display: flex;
		padding: 1px;
		background-color: #23262d;
		background-image: none;
		background-size: 400%;
		border-radius: 7px;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
	}
	button,
	a {
		text-align: center;
		text-decoration: none;
		cursor: pointer;
		border: none;
		width: 100%;
		border-radius: 8px;
		color: white;
		background-color: #23262d;
		padding: 1rem;
		opacity: 0.8;
		font-size: large;
	}
	div:is(:hover, :focus-within) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}
	div:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent-light));
	}
</style>
