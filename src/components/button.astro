---
type Props =
	| ({
			href: string;
	  } & astroHTML.JSX.AnchorHTMLAttributes)
	| ({
			href?: undefined;
	  } & astroHTML.JSX.ButtonHTMLAttributes);

const props = Astro.props;
---

<div>
	{
		props.href !== undefined ? (
			<a {...props} href={props.href}>
				<slot />
			</a>
		) : (
			<button {...props}>
				<slot />
			</button>
		)
	}
</div>

<style>
	div {
		width: 100%;
		list-style: none;
		display: grid;
		padding: 1px;
		background-image: none;
		background-size: 400%;
		border-radius: 7px;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
	}
	a,
	button {
		border: none;
		border-radius: 8px;
		background-color: #23262d10;
		padding: 1rem;
		opacity: 0.8;
		font-size: large;
		border-top: 1px solid rgba(255, 255, 255, 0.1);
		outline: none;
		min-width: 0;
	}
	div:is(:focus, :focus-within) {
		box-shadow: inset 0 0 0 2px rgb(var(--accent));
	}
	div:is(:focus, :focus-within) a,
	div:is(:focus, :focus-within) button {
		color: rgb(var(--accent));
	}
</style>
