---
interface Props {
	title: string;
	href?: string;
	target?: boolean;
}

const { href, title, target } = Astro.props;
---

<li>
	{
		href ? (
			<a href={href} target={target ? '_blank' : ''}>
				<h2>
					<span>{title}</span>
					{target ? (
						<svg
							xmlns="http://www.w3.org/2000/svg"
							width="24"
							height="24"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"
							class="lucide lucide-external-link"
						>
							<>
								<path d="M15 3h6v6" />
								<path d="M10 14 21 3" />
								<path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" />
							</>
						</svg>
					) : (
						<span>&rarr;</span>
					)}
				</h2>
				<slot />
			</a>
		) : (
			<span>
				<h2> {title} </h2>
				<slot />
			</span>
		)
	}
</li>

<style>
	li {
		list-style: none;
		display: flex;
		padding: 1px;
		background-color: #23262d;
		background-image: none;
		background-size: 400%;
		border-radius: 7px;
		background-position: 100%;
		transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.1);
	}
	li > a,
	li > span {
		width: 100%;
		text-decoration: none;
		line-height: 1.4;
		padding: calc(1.5rem - 1px);
		border-radius: 8px;
		color: white;
		background-color: #23262d;
		opacity: 0.8;
	}
	h2 {
		margin: 0;
		font-size: 1.25rem;
		transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}
	a:hover h2 {
		text-decoration: underline;
	}
	svg {
		width: 1.25rem;
		height: 1.25rem;
		vertical-align: middle;
	}
	li:is(:hover, :focus-within) {
		background-position: 0;
		background-image: var(--accent-gradient);
	}
	li:is(:hover, :focus-within) h2 {
		color: rgb(var(--accent-light));
	}
</style>
