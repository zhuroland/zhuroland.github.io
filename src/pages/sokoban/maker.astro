---
import Layout from "../../layouts/SokobanLayout.astro";
import Button from "../../components/button.astro";
---

<Layout
  title="Sokoban Level Maker"
  description="Create and customize your own Sokoban levels easily."
>
  <div class="navigation">
    <h1>Sokoban Level Maker</h1>
    <Button href="/games">Go back</Button>
    <Button href="/sokoban">Play Sokoban</Button>
  </div>

  <div class="maker-container">
    <div class="side-panel">
      <h3>Blocks</h3>
      <div class="block-selector">
        <button class="block-button selected" data-block-type="floor">
          <img src="/assets/sokoban/ground.png" alt="Floor" />
          <span>Floor</span>
        </button>
        <button class="block-button" data-block-type="wall">
          <img src="/assets/sokoban/wall.png" alt="Wall" />
          <span>Wall</span>
        </button>
        <button class="block-button" data-block-type="target">
          <img src="/assets/sokoban/target.png" alt="Target" />
          <span>Target</span>
        </button>
        <button class="block-button" data-block-type="box">
          <img src="/assets/sokoban/box.png" alt="Box" />
          <span>Box</span>
        </button>
        <button class="block-button" data-block-type="player">
          <img src="/assets/sokoban/cat.png" alt="Player" />
          <span>Player</span>
        </button>
        <button class="block-button" data-block-type="box_on_target">
          <div class="combined-image">
            <img src="/assets/sokoban/box.png" alt="Box" />
            <div class="overlay"></div>
          </div>
          <span>Box on Target</span>
        </button>
      </div>

      <div class="grid-controls">
        <h3>Grid Size</h3>
        <div class="grid-size">
          <label>
            Width (5-20):
            <input type="number" id="grid-width" min="5" max="20" value="10" />
          </label>
          <label>
            Height (5-20):
            <input type="number" id="grid-height" min="5" max="20" value="10" />
          </label>
          <button id="resize-grid">Resize Grid</button>
        </div>
      </div>

      <div class="actions">
        <h3>Actions</h3>
        <button id="clear-grid">Clear Grid</button>
        <button id="fill-walls">Fill Border with Walls</button>
        <button id="export-level">Export Level</button>
  <button id="play-test-toggle">Play Test</button>
  <button id="reset-play-test" style="display:none;">Reset Test</button>
      </div>

      <div class="export-area">
        <h3>Export</h3>
        <textarea id="export-code" readonly rows="5"></textarea>
        <div class="validation-message" id="validation-message"></div>
      </div>

      <div class="import-area">
        <h3>Import Level</h3>
        <textarea
          id="import-code-area"
          rows="5"
          placeholder="Paste level JSON code here..."></textarea>
        <button id="import-level-button">Import Level</button>
        <div class="validation-message" id="import-validation-message"></div>
      </div>

      <div class="help-section">
        <h3>Keyboard Shortcuts</h3>
        <div class="shortcuts">
          <div><strong>F</strong>: Floor</div>
          <div><strong>W</strong>: Wall</div>
          <div><strong>T</strong>: Target</div>
          <div><strong>B</strong>: Box</div>
          <div><strong>P</strong>: Player</div>
          <div><strong>G</strong>: Box on Target</div>
          <div><strong>E</strong>: Toggle Play Mode</div>
          <div><strong>R</strong>: Reset (Play Mode)</div>
        </div>
        <p class="tip">Tip: Click and drag to paint multiple tiles!</p>
      </div>
    </div>

    <div class="grid-container">
      <div class="grid" id="level-grid"></div>
    </div>
  </div>
</Layout>

<style>
  * {
    box-sizing: border-box;
  }

  .navigation {
    display: grid;
    grid-template-columns: 2fr 1fr 1fr;
    gap: 1rem;
    margin-bottom: 1rem;
  }
  .maker-container {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
    height: calc(100vh - 150px);
    max-height: 800px;
  }

  .side-panel {
    width: 250px;
    min-width: 250px;
    background-color: #f0f0f0;
    padding: 1rem;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    overflow-y: auto;
  }

  .block-selector {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
  }

  .block-button {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 0.5rem;
    background-color: #fff;
    border: 2px solid #ddd;
    border-radius: 4px;
    cursor: pointer;
    transition: border-color 0.2s;
  }

  .block-button:hover {
    border-color: #aaa;
  }

  .block-button.selected {
    border-color: #4a5568;
    background-color: #e2e8f0;
  }

  .block-button img {
    width: 40px;
    height: 40px;
    object-fit: contain;
  }

  .block-button span {
    margin-top: 0.25rem;
    font-size: 0.8rem;
    text-align: center;
  }

  .combined-image {
    position: relative;
    width: 40px;
    height: 40px;
  }

  .combined-image img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .combined-image .overlay {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1;
    background-color: rgba(0, 255, 0, 0.5);
    width: 100%;
    height: 100%;
  }

  .grid-controls,
  .actions {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .grid-size {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .grid-size label {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .grid-size input {
    width: 60px;
    padding: 0.25rem;
  }

  button {
    padding: 0.5rem;
    background-color: #4a5568;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  button:hover {
    background-color: #2d3748;
  }

  .grid-container {
    flex: 1;
    overflow: auto;
    padding: 1rem;
    background-color: #f8f9fa;
    border-radius: 8px;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    user-select: none;
  }

  .grid {
    display: grid;
    gap: 1px;
    background-color: #ccc;
    border: 1px solid #ccc;
  }

  .grid-cell {
    width: 40px;
    height: 40px;
    aspect-ratio: 1/1;
    background-color: #f8f9fa;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    transition: transform 0.1s ease-in-out;
    padding: 0;
    overflow: hidden;
  }

  .grid-cell:hover {
    transform: scale(1.05);
    box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);
    z-index: 1;
  }

  .grid-cell img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    image-rendering: pixelated;
    padding: 0;
    margin: 0;
  }

  .export-area {
    margin-top: 1rem;
  }

  #export-code {
    width: 100%;
    height: 100px;
    font-family: monospace;
    padding: 0.5rem;
    resize: vertical;
  }

  .validation-message {
    margin-top: 0.5rem;
    font-size: 0.9rem;
  }

  .validation-message.error {
    color: #e53e3e;
  }

  .validation-message.success {
    color: #38a169;
  }

  .import-area {
    margin-top: 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  #import-code-area {
    width: 100%;
    font-family: monospace;
    padding: 0.5rem;
    resize: vertical;
    border: 1px solid #ddd;
    border-radius: 4px;
  }

  .help-section {
    margin-top: 1rem;
    border-top: 1px solid #ddd;
    padding-top: 1rem;
  }

  .shortcuts {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
    margin-top: 0.5rem;
    font-size: 0.9rem;
  }

  .tip {
    margin-top: 0.5rem;
    font-size: 0.9rem;
    font-style: italic;
    color: #4a5568;
  }

  @media (max-width: 768px) {
    .maker-container {
      flex-direction: column;
      height: auto;
      max-height: none;
    }

    .side-panel {
      width: 100%;
    }
  }
</style>

<script>
  // Define types
  type CellType =
    | "floor"
    | "wall"
    | "target"
    | "box"
    | "player"
  | "box_on_target"
  | "player_on_target"; // only used in play mode

  interface Cell {
    type: CellType;
    element: HTMLElement;
  }

  // Main class for the level maker
  class LevelMaker {
    private grid: Cell[][] = [];
    private gridElement: HTMLElement;
    private selectedBlockType: CellType = "floor";
    private gridWidth = 10;
    private gridHeight = 10;
    private playerPosition: { x: number; y: number } | null = null;
    private exportCodeElement: HTMLTextAreaElement;
    private validationMessageElement: HTMLElement;
    private importCodeAreaElement: HTMLTextAreaElement;
    private importValidationMessageElement: HTMLElement;
    private isPainting = false;
  private isPlayMode = false;
  private playModeSnapshot: CellType[][] | null = null;
  private playModePlayerStart: { x: number; y: number } | null = null;

    constructor() {
      // Initialize DOM elements
      this.gridElement = document.getElementById("level-grid") as HTMLElement;
      this.exportCodeElement = document.getElementById(
        "export-code"
      ) as HTMLTextAreaElement;
      this.validationMessageElement = document.getElementById(
        "validation-message"
      ) as HTMLElement;
      this.importCodeAreaElement = document.getElementById(
        "import-code-area"
      ) as HTMLTextAreaElement;
      this.importValidationMessageElement = document.getElementById(
        "import-validation-message"
      ) as HTMLElement;

      // Set up event listeners
      this.setupEventListeners();

      // Initialize the grid
      this.createGrid();

      // Add document-level events for painting
      document.addEventListener("mouseup", () => this.stopPainting());
      document.addEventListener("mouseleave", () => this.stopPainting());

      // Add event listener to the grid container for better drag handling
      this.gridElement.addEventListener("mousemove", (e) => {
        if (this.isPainting) {
          // Find the cell under the current mouse position
          const cell = document.elementFromPoint(
            e.clientX,
            e.clientY
          ) as HTMLElement;
          if (cell && cell.classList.contains("grid-cell")) {
            const x = parseInt(cell.dataset.x || "-1");
            const y = parseInt(cell.dataset.y || "-1");
            // Simplified condition to allow drag-painting for all block types
            if (x >= 0 && y >= 0) {
              this.handleCellClick(x, y);
            }
          }
        }
      });
    }

    // Track current painting coordinates to prevent duplicates
    private lastPaintedX: number = -1;
    private lastPaintedY: number = -1;

    private selectBlockType(type: CellType): void {
      this.selectedBlockType = type;

      // Update UI to reflect the selection
      document.querySelectorAll(".block-button").forEach((button) => {
        button.classList.remove("selected");
        if (button.getAttribute("data-block-type") === type) {
          button.classList.add("selected");
        }
      });
    }

    private setupEventListeners(): void {
      // Block type selection
      const blockButtons = document.querySelectorAll(".block-button");
      blockButtons.forEach((button) => {
        button.addEventListener("click", () => {
          blockButtons.forEach((b) => b.classList.remove("selected"));
          button.classList.add("selected");
          this.selectedBlockType = button.getAttribute(
            "data-block-type"
          ) as CellType;
        });
      });

      // Keyboard shortcuts
      document.addEventListener("keydown", (e) => {
        // Ignore when typing in inputs or textareas
        const tag = (e.target as HTMLElement)?.tagName;
        if (tag === "INPUT" || tag === "TEXTAREA") return;
        switch (e.key) {
          case "f": // Floor
            this.selectBlockType("floor");
            break;
          case "w": // Wall
            this.selectBlockType("wall");
            break;
          case "t": // Target
            this.selectBlockType("target");
            break;
          case "b": // Box
            this.selectBlockType("box");
            break;
          case "p": // Player
            this.selectBlockType("player");
            break;
          case "g": // Box on target
            this.selectBlockType("box_on_target");
            break;
          case "e": // Enter/Exit play mode
            if (this.isPlayMode) {
              this.exitPlayMode();
            } else {
              this.enterPlayMode();
            }
            break;
          case "r": // Reset play mode
            if (this.isPlayMode) {
              this.resetPlayMode();
            }
            break;
          case "Escape": // Cancel painting
            this.stopPainting();
            break;
        }
      });

      // Grid controls
      document.getElementById("resize-grid")?.addEventListener("click", () => {
        const widthInput = document.getElementById(
          "grid-width"
        ) as HTMLInputElement;
        const heightInput = document.getElementById(
          "grid-height"
        ) as HTMLInputElement;
        const newWidth = parseInt(widthInput.value);
        const newHeight = parseInt(heightInput.value);

        if (
          newWidth >= 5 &&
          newWidth <= 20 &&
          newHeight >= 5 &&
          newHeight <= 20
        ) {
          this.gridWidth = newWidth;
          this.gridHeight = newHeight;
          this.createGrid();
        }
      });
      document.addEventListener("mousedown", (e) => this.handleMouseDown(e));
      document.addEventListener("mousemove", (e) => this.handleMouseMove(e));
      document.addEventListener("mouseup", () => this.stopPainting());
      // Action buttons
      document.getElementById("clear-grid")?.addEventListener("click", () => {
        this.clearGrid();
      });

      document.getElementById("fill-walls")?.addEventListener("click", () => {
        this.fillBorderWithWalls();
      });

      document.getElementById("export-level")?.addEventListener("click", () => {
        this.exportLevel();
      });

      document
        .getElementById("import-level-button")
        ?.addEventListener("click", () => {
          this.importLevel();
        });

      // Play test toggle
      document.getElementById("play-test-toggle")?.addEventListener("click", () => {
        if (this.isPlayMode) {
          this.exitPlayMode();
        } else {
          this.enterPlayMode();
        }
      });
      document.getElementById("reset-play-test")?.addEventListener("click", () => {
        if (this.isPlayMode) {
          this.resetPlayMode();
        }
      });
    }

    private handleMouseDown(e: MouseEvent): void {
      const cell = this.getEventCell(e);
      if (cell) {
        this.startPainting();
        this.handleCellClick(cell.x, cell.y);
      }
    }

    private handleMouseMove(e: MouseEvent): void {
      if (!this.isPainting) return;
      const cell = this.getEventCell(e);
      if (cell) {
        this.handleCellClick(cell.x, cell.y);
      }
    }

    private getEventCell(e: MouseEvent): { x: number; y: number } | null {
      const target = e.target as HTMLElement;
      const cellElement = target.closest(".grid-cell") as HTMLElement | null;
      if (!cellElement) return null;

      const x = parseInt(cellElement.dataset.x || "-1");
      const y = parseInt(cellElement.dataset.y || "-1");
      if (x >= 0 && y >= 0 && x < this.gridWidth && y < this.gridHeight) {
        return { x, y };
      }
      return null;
    }

    private startPainting(): void {
      this.isPainting = true;
      this.lastPaintedX = -1;
      this.lastPaintedY = -1;
    }

    private stopPainting(): void {
      this.isPainting = false;
    }

    private createGrid(): void {
      // Clear existing grid
      this.gridElement.innerHTML = "";
      this.grid = [];
      this.playerPosition = null;

      // Set grid columns
      this.gridElement.style.gridTemplateColumns = `repeat(${this.gridWidth}, 40px)`;
      this.gridElement.style.gridTemplateRows = `repeat(${this.gridHeight}, 40px)`;

      // Create cells
      for (let y = 0; y < this.gridHeight; y++) {
        this.grid[y] = [];
        for (let x = 0; x < this.gridWidth; x++) {
          const cell = document.createElement("div");
          cell.className = "grid-cell";
          cell.dataset.x = x.toString();
          cell.dataset.y = y.toString();

          // Set default cell type
          this.grid[y][x] = {
            type: "floor",
            element: cell,
          };

          // Add image
          const img = document.createElement("img");
          img.src = "/assets/sokoban/ground.png";
          img.alt = "floor";
          img.style.display = "block";
          img.style.width = "100%";
          img.style.height = "100%";
          cell.appendChild(img);

          // Add event listeners for click and drag painting
          cell.addEventListener("mousedown", (e) => {
            e.preventDefault();
            this.handleCellClick(x, y);
            this.startPainting();
          });

          // We'll use the grid-level mousemove event instead of individual cell events
          // This prevents issues with fast mouse movement skipping cells

          this.gridElement.appendChild(cell);
        }
      }
    }

    private handleCellClick(x: number, y: number): void {
      // Skip if trying to paint same cell twice in a row during painting
      if (
        this.isPainting &&
        x === this.lastPaintedX &&
        y === this.lastPaintedY
      ) {
        return;
      }

      // Update tracking variables
      this.lastPaintedX = x;
      this.lastPaintedY = y;

      // Make sure x and y are within grid bounds
      if (y < 0 || y >= this.gridHeight || x < 0 || x >= this.gridWidth) {
        return;
      }

      const cell = this.grid[y][x];

      // Handle player placement (can only be placed once)
      if (this.selectedBlockType === "player") {
        if (this.playerPosition) {
          // Remove previous player
          const prevCell =
            this.grid[this.playerPosition.y][this.playerPosition.x];
          prevCell.type = "floor";
          this.setCellToType(prevCell.element, "floor");
        }
        this.playerPosition = { x, y };
      }

      // Update cell type
      cell.type = this.selectedBlockType;

      // Update cell appearance
      this.setCellToType(cell.element, this.selectedBlockType);
    }

    private setCellToType(cellElement: HTMLElement, type: CellType): void {
      // Remove any existing content
      while (cellElement.firstChild) {
        cellElement.removeChild(cellElement.firstChild);
      }

      // Create new image element with proper dimensions and display
      const img = document.createElement("img");
      img.style.display = "block";
      img.style.width = "100%";
      img.style.height = "100%";
      img.style.imageRendering = "pixelated";

      switch (type) {
        case "floor":
          img.src = "/assets/sokoban/ground.png";
          img.alt = "Floor";
          cellElement.appendChild(img);
          break;
        case "wall":
          img.src = "/assets/sokoban/wall.png";
          img.alt = "Wall";
          cellElement.appendChild(img);
          break;
        case "target":
          img.src = "/assets/sokoban/target.png";
          img.alt = "Target";
          cellElement.appendChild(img);
          break;
        case "box":
          img.src = "/assets/sokoban/box.png";
          img.alt = "Box";
          cellElement.appendChild(img);
          break;
        case "player":
          img.src = "/assets/sokoban/cat.png";
          img.alt = "Player";
          cellElement.appendChild(img);
          break;
        case "box_on_target":
          // For box on target, we need to overlay two images
          const container = document.createElement("div");
          container.style.position = "relative";
          container.style.width = "100%";
          container.style.height = "100%";

          const targetImg = document.createElement("img");
          targetImg.src = "/assets/sokoban/target.png";
          targetImg.alt = "Target";
          targetImg.style.position = "absolute";
          targetImg.style.top = "0";
          targetImg.style.left = "0";
          targetImg.style.width = "100%";
          targetImg.style.height = "100%";
          targetImg.style.imageRendering = "pixelated";

          const boxImg = document.createElement("img");
          boxImg.src = "/assets/sokoban/box.png";
          boxImg.alt = "Box";
          boxImg.style.position = "absolute";
          boxImg.style.top = "0";
          boxImg.style.left = "0";
          boxImg.style.width = "100%";
          boxImg.style.height = "100%";
          boxImg.style.zIndex = "1";
          boxImg.style.imageRendering = "pixelated";

          // Add green mask overlay
          const greenMask = document.createElement("div");
          greenMask.style.position = "absolute";
          greenMask.style.top = "0";
          greenMask.style.left = "0";
          greenMask.style.width = "100%";
          greenMask.style.height = "100%";
          greenMask.style.backgroundColor = "rgba(0, 255, 0, 0.5)";
          greenMask.style.zIndex = "2";

          container.appendChild(targetImg);
          container.appendChild(boxImg);
          container.appendChild(greenMask);
          cellElement.appendChild(container);
          break;
        case "player_on_target":
          // target + player
          const wrap = document.createElement("div");
          wrap.style.position = "relative";
          wrap.style.width = "100%";
          wrap.style.height = "100%";

          const tImg = document.createElement("img");
          tImg.src = "/assets/sokoban/target.png";
          tImg.alt = "Target";
          tImg.style.position = "absolute";
          tImg.style.top = "0";
          tImg.style.left = "0";
          tImg.style.width = "100%";
          tImg.style.height = "100%";
          tImg.style.imageRendering = "pixelated";

          const pImg = document.createElement("img");
          pImg.src = "/assets/sokoban/cat.png";
          pImg.alt = "Player";
          pImg.style.position = "absolute";
          pImg.style.top = "0";
          pImg.style.left = "0";
          pImg.style.width = "100%";
          pImg.style.height = "100%";
          pImg.style.zIndex = "1";
          pImg.style.imageRendering = "pixelated";

          wrap.appendChild(tImg);
          wrap.appendChild(pImg);
          cellElement.appendChild(wrap);
          break;
      }
    }

    private clearGrid(): void {
      for (let y = 0; y < this.gridHeight; y++) {
        for (let x = 0; x < this.gridWidth; x++) {
          const cell = this.grid[y][x];
          cell.type = "floor";
          this.setCellToType(cell.element, "floor");
        }
      }
      this.playerPosition = null;
    }

    private fillBorderWithWalls(): void {
      for (let y = 0; y < this.gridHeight; y++) {
        for (let x = 0; x < this.gridWidth; x++) {
          // Check if cell is on the border
          if (
            x === 0 ||
            y === 0 ||
            x === this.gridWidth - 1 ||
            y === this.gridHeight - 1
          ) {
            const cell = this.grid[y][x];
            cell.type = "wall";
            this.setCellToType(cell.element, "wall");
          }
        }
      }
    }

    private exportLevel(): void {
      // Validate level before exporting
      if (!this.validateLevel()) {
        return;
      }

      const levelDataMap: string[] = [];
      for (let y = 0; y < this.gridHeight; y++) {
        let rowString = "";
        for (let x = 0; x < this.gridWidth; x++) {
          const cell = this.grid[y][x];
          let char = " "; // Default to floor
          switch (cell.type) {
            case "wall":
              char = "W";
              break;
            case "floor":
              char = " ";
              break;
            case "target":
              char = "T";
              break;
            case "box":
              char = "B";
              break;
            case "player":
              char = "P";
              break;
            case "box_on_target":
              char = "G";
              break;
          }
          rowString += char;
        }
        levelDataMap.push(rowString);
      }

      const levelObject = { map: levelDataMap };
      const levelCode = JSON.stringify(levelObject, null, 2); // Output valid JSON
      this.exportCodeElement.value = levelCode;

      // Show success message
      this.validationMessageElement.textContent =
        "Level exported successfully as JSON! Copy this code.";
      this.validationMessageElement.className = "validation-message success";
    }

    private importLevel(): void {
      const levelCodeString = this.importCodeAreaElement.value.trim();
      this.importValidationMessageElement.textContent = ""; // Clear previous messages
      this.importValidationMessageElement.className = "validation-message";

      if (!levelCodeString) {
        this.importValidationMessageElement.textContent =
          "Error: No level code provided.";
        this.importValidationMessageElement.className =
          "validation-message error";
        return;
      }

      try {
        const parsedLevel = JSON.parse(levelCodeString);

        if (
          !parsedLevel ||
          !parsedLevel.map ||
          !Array.isArray(parsedLevel.map)
        ) {
          this.importValidationMessageElement.textContent =
            "Error: Invalid level structure. Missing 'map' array.";
          this.importValidationMessageElement.className =
            "validation-message error";
          return;
        }

        const newMap = parsedLevel.map as string[];
        if (
          newMap.length === 0 ||
          newMap.some((row) => typeof row !== "string")
        ) {
          this.importValidationMessageElement.textContent =
            "Error: Invalid map data. Must be an array of strings.";
          this.importValidationMessageElement.className =
            "validation-message error";
          return;
        }

        const newHeight = newMap.length;
        const newWidth = newMap[0] ? newMap[0].length : 0;

        if (newHeight < 5 || newHeight > 20 || newWidth < 5 || newWidth > 20) {
          this.importValidationMessageElement.textContent = `Error: Invalid grid dimensions. Width/Height must be between 5 and 20. Detected: ${newWidth}x${newHeight}`;
          this.importValidationMessageElement.className =
            "validation-message error";
          return;
        }

        // Update grid dimensions and recreate
        this.gridWidth = newWidth;
        this.gridHeight = newHeight;
        (document.getElementById("grid-width") as HTMLInputElement).value =
          newWidth.toString();
        (document.getElementById("grid-height") as HTMLInputElement).value =
          newHeight.toString();

        this.createGrid(); // Reinitializes grid and clears playerPosition

        let tempPlayerPosition: { x: number; y: number } | null = null;
        let boxCount = 0;
        let targetCount = 0;

        for (let y = 0; y < this.gridHeight; y++) {
          if (!newMap[y] || newMap[y].length !== this.gridWidth) {
            this.importValidationMessageElement.textContent = `Error: Inconsistent row length or missing row at row ${y + 1}. Expected ${this.gridWidth}, got ${newMap[y]?.length || 0}.`;
            this.importValidationMessageElement.className =
              "validation-message error";
            this.clearGrid();
            return;
          }
          for (let x = 0; x < this.gridWidth; x++) {
            const char = newMap[y][x];
            let cellTypeToSet: CellType = "floor";

            switch (char) {
              case "W":
                cellTypeToSet = "wall";
                break;
              case " ":
                cellTypeToSet = "floor";
                break;
              case "T":
                cellTypeToSet = "target";
                targetCount++;
                break;
              case "B":
                cellTypeToSet = "box";
                boxCount++;
                break;
              case "P":
                cellTypeToSet = "player";
                if (tempPlayerPosition) {
                  this.importValidationMessageElement.textContent =
                    "Error: Multiple players defined in level code.";
                  this.importValidationMessageElement.className =
                    "validation-message error";
                  this.clearGrid();
                  return;
                }
                tempPlayerPosition = { x, y };
                break;
              case "G":
                cellTypeToSet = "box_on_target";
                boxCount++;
                targetCount++;
                break;
              default:
                this.importValidationMessageElement.textContent = `Error: Unknown character '${char}' in level code at row ${y + 1}, col ${x + 1}.`;
                this.importValidationMessageElement.className =
                  "validation-message error";
                this.clearGrid();
                return;
            }
            this.grid[y][x].type = cellTypeToSet;
            this.setCellToType(this.grid[y][x].element, cellTypeToSet);
          }
        }

        this.playerPosition = tempPlayerPosition; // Set player position after successful parsing of all cells

        if (!this.playerPosition) {
          // Check if player was actually found and set
          this.importValidationMessageElement.textContent =
            "Error: Imported level must have a player.";
          this.importValidationMessageElement.className =
            "validation-message error";
          this.clearGrid();
          return;
        }

        if (
          (boxCount > 0 || targetCount > 0) &&
          (boxCount === 0 || targetCount === 0)
        ) {
          this.importValidationMessageElement.textContent =
            "Error: Imported level must have at least one box AND one target if either is present and non-zero.";
          this.importValidationMessageElement.className =
            "validation-message error";
          this.clearGrid();
          return;
        }
        if (boxCount !== targetCount) {
          this.importValidationMessageElement.textContent = `Error: Imported level has ${boxCount} boxes and ${targetCount} targets. They must match.`;
          this.importValidationMessageElement.className =
            "validation-message error";
          this.clearGrid();
          return;
        }

        this.importValidationMessageElement.textContent =
          "Level imported successfully!";
        this.importValidationMessageElement.className =
          "validation-message success";
        this.validationMessageElement.textContent = ""; // Clear export validation message
      } catch (error) {
        this.importValidationMessageElement.textContent =
          "Error: Could not parse level code. Ensure it's valid JSON.";
        this.importValidationMessageElement.className =
          "validation-message error";
        console.error("Error importing level:", error);
        this.clearGrid(); // Attempt to clear to a known state on parsing error
      }
    }

    private validateLevel(): boolean {
      // Check if player exists
      if (!this.playerPosition) {
        this.validationMessageElement.textContent =
          "Error: Level must have a player!";
        this.validationMessageElement.className = "validation-message error";
        return false;
      }

      // Count boxes and targets
      let boxCount = 0;
      let targetCount = 0;

      for (let y = 0; y < this.gridHeight; y++) {
        for (let x = 0; x < this.gridWidth; x++) {
          const cell = this.grid[y][x];
          if (cell.type === "box" || cell.type === "box_on_target") {
            boxCount++;
          }
          if (cell.type === "target" || cell.type === "box_on_target") {
            targetCount++;
          }
        }
      }

      // Check if boxes match targets
      if (boxCount === 0 || targetCount === 0) {
        this.validationMessageElement.textContent =
          "Error: Level must have at least one box and one target!";
        this.validationMessageElement.className = "validation-message error";
        return false;
      }

      if (boxCount < targetCount) {
        this.validationMessageElement.textContent = `Error: Number of boxes (${boxCount}) cannot be less than number of targets (${targetCount})!`;
        this.validationMessageElement.className = "validation-message error";
        return false;
      }

      if (boxCount > targetCount) {
        this.validationMessageElement.textContent = `Warning: There are more boxes (${boxCount}) than targets (${targetCount}). Some boxes cannot be placed on targets.`;
        this.validationMessageElement.className = "validation-message error";
        // This is just a warning, not an error that prevents export
      }

      return true;
    }

    // --- Play Mode Logic ---
    private enterPlayMode(): void {
      if (!this.validateLevel()) return;
      // snapshot grid
      this.playModeSnapshot = this.grid.map((row) => row.map((c) => c.type));
      this.playModePlayerStart = this.playerPosition
        ? { ...this.playerPosition }
        : null;
      this.isPlayMode = true;
      (document.getElementById("play-test-toggle") as HTMLButtonElement).textContent =
        "Stop Test";
      (document.getElementById("reset-play-test") as HTMLButtonElement).style.display =
        "block";
      this.validationMessageElement.textContent =
        "Play mode: Use arrow keys or WASD to move. Push all boxes onto targets.";
      this.validationMessageElement.className = "validation-message";
      // Add key listener for movement (reuse existing keydown by enhancing it)
      document.addEventListener("keydown", this.playKeyHandler);
    }

    private exitPlayMode(): void {
      this.isPlayMode = false;
      (document.getElementById("play-test-toggle") as HTMLButtonElement).textContent =
        "Play Test";
      (document.getElementById("reset-play-test") as HTMLButtonElement).style.display =
        "none";
      document.removeEventListener("keydown", this.playKeyHandler);
      // restore snapshot
      if (this.playModeSnapshot) {
        for (let y = 0; y < this.gridHeight; y++) {
          for (let x = 0; x < this.gridWidth; x++) {
            const t = this.playModeSnapshot[y][x];
            this.grid[y][x].type = t;
            this.setCellToType(this.grid[y][x].element, t);
          }
        }
        this.playerPosition = this.playModePlayerStart
          ? { ...this.playModePlayerStart }
          : null;
      }
      this.validationMessageElement.textContent = "Exited play mode.";
      this.validationMessageElement.className = "validation-message";
    }

    private resetPlayMode(): void {
      if (!this.isPlayMode || !this.playModeSnapshot) return;
      for (let y = 0; y < this.gridHeight; y++) {
        for (let x = 0; x < this.gridWidth; x++) {
          const t = this.playModeSnapshot[y][x];
          this.grid[y][x].type = t;
          this.setCellToType(this.grid[y][x].element, t);
        }
      }
      this.playerPosition = this.playModePlayerStart
        ? { ...this.playModePlayerStart }
        : null;
      this.validationMessageElement.textContent =
        "Play mode reset. Try again.";
      this.validationMessageElement.className = "validation-message";
    }

    private playKeyHandler = (e: KeyboardEvent) => {
      if (!this.isPlayMode) return;
      const keyMap: Record<string, [number, number]> = {
        ArrowUp: [0, -1],
        w: [0, -1],
        ArrowDown: [0, 1],
        s: [0, 1],
        ArrowLeft: [-1, 0],
        a: [-1, 0],
        ArrowRight: [1, 0],
        d: [1, 0],
      };
      if (keyMap[e.key]) {
        e.preventDefault();
        const [dx, dy] = keyMap[e.key];
        this.attemptMove(dx, dy);
      }
    };

    private attemptMove(dx: number, dy: number): void {
      if (!this.playerPosition) return;
      const { x, y } = this.playerPosition;
      const nx = x + dx;
      const ny = y + dy;
      if (nx < 0 || nx >= this.gridWidth || ny < 0 || ny >= this.gridHeight)
        return;
      const targetCell = this.grid[ny][nx];
      if (targetCell.type === "wall") return;
      // Pushing logic
      if (targetCell.type === "box" || targetCell.type === "box_on_target") {
        const bx = nx + dx;
        const by = ny + dy;
        if (
          bx < 0 ||
          bx >= this.gridWidth ||
          by < 0 ||
          by >= this.gridHeight
        )
          return;
        const beyond = this.grid[by][bx];
        if (
          beyond.type === "wall" ||
          beyond.type === "box" ||
          beyond.type === "box_on_target"
        )
          return; // cannot push
        // move box
        if (beyond.type === "target") {
          beyond.type = "box_on_target";
        } else if (beyond.type === "floor") {
          beyond.type = "box";
        } else if (beyond.type === "player_on_target") {
          // shouldn't happen
          return;
        }
        this.setCellToType(beyond.element, beyond.type);
        // Vacated target cell after box moves
        if (targetCell.type === "box_on_target") {
          targetCell.type = "target"; // underlying target remains for player to occupy
        } else {
          targetCell.type = "floor";
        }
      }
      // Move player
      const currentCell = this.grid[y][x];
      if (currentCell.type === "player_on_target") {
        currentCell.type = "target";
      } else {
        currentCell.type = "floor";
      }
      this.setCellToType(currentCell.element, currentCell.type);

      // Destination cell after potential box push
      if (targetCell.type === "target") {
        targetCell.type = "player_on_target";
      } else if (targetCell.type === "floor") {
        targetCell.type = "player";
      }
      this.setCellToType(targetCell.element, targetCell.type);
      this.playerPosition = { x: nx, y: ny };
      this.checkWinCondition();
    }

    private checkWinCondition(): void {
      // win if no bare targets remain
      for (let y = 0; y < this.gridHeight; y++) {
        for (let x = 0; x < this.gridWidth; x++) {
          if (this.grid[y][x].type === "target") return; // still unsatisfied
        }
      }
      this.validationMessageElement.textContent =
        "Solved! All targets are covered. You can export or continue editing.";
      this.validationMessageElement.className = "validation-message success";
    }
  }

  // Initialize the level maker when the DOM is fully loaded
  document.addEventListener("DOMContentLoaded", () => {
    new LevelMaker();
  });
</script>
